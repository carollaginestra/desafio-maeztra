@charset "UTF-8";

// Breakpoint 
@mixin breakpoint($name) {
    @if map-has-key($breakpoints, $name) {
        @media #{inspect(map-get($breakpoints, $name))} {
            @content;
        }
    }
    @else {
        @warn "Não foi possível encontrar um breakpoint com o nome `#{$name}`.";
    }
}

/**
*  Define o 'width' e 'height' do elemento.
 * @mixin Size Elements
 * @section Size
 * @param $width Largura a ser definido
 * @param $height Altura a ser definido
 * @example
 *  @include size(10)
 *  @include size(auto, 2)
 */
@mixin size($width, $height: $width) {
	@if _is-size($height) {
		height: $height;
	} @else {
		@error '`#{$height}` is not a valid length for the `$height` argument ' +
           'in the `size` mixin.';
	}

	@if _is-size($width) {
		width: $width;
	} @else {
		@error '`#{$width}` is not a valid length for the `$width` argument ' +
           'in the `size` mixin.';
	}
}


// Convert pixels to rems
@function rem($pxval) {
	@if not unitless($pxval) {
		$pxval: strip-units($pxval);
	}

	$base: $em-base;
	@if not unitless($base) {
		$base: strip-units($base);
	}
	@return ($pxval / $base) * 1rem;
}



// Map deep get

/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		$map: map-get($map, $key);
	}
	@return $map;
}

// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function map-deep-set($map, $keys, $value) {
	$maps: ($map);
	$result: null;

	// If the last key is a map already
	// Warn the user we will be overriding it with $value
	@if type-of(nth($keys, -1)) == 'map' {
		@warn 'The last key you specified is a map; it will be overrided with `#{$value}`.';
	}

	// If $keys is a single key
	// Just merge and return
	@if length($keys) == 1 {
		@return map-merge($map, ($keys: $value));
	}

	// Loop from the first to the second to last key from $keys
	// Store the associated map to this key in the $maps list
	// If the key doesn't exist, throw an error
	@for $i from 1 through length($keys) - 1 {
		$current-key: nth($keys, $i);
		$current-map: nth($maps, -1);
		$current-get: map-get($current-map, $current-key);
		@if $current-get == null {
			@error "Key `#{$key}` doesn't exist at current level in map.";
		}
		$maps: append($maps, $current-get);
	}

	// Loop from the last map to the first one
	// Merge it with the previous one
	@for $i from length($maps) through 1 {
		$current-map: nth($maps, $i);
		$current-key: nth($keys, $i);
		$current-val: if($i == length($maps), $value, $result);
		$result: map-merge($current-map, ($current-key: $current-val));
	}

	// Return result
	@return $result;
}


//Antialised

/**
*  Resultará em uma aparência mais fina e mais nítida de fontes. Como ambos não são padrão foi definido um mixin simples para normalizar as diferenças de sintaxe.
 *  -moz-osx-font-smoothing: agora é suportado no Firefox estável.
 * @mixin Antialiasing Enable
 * @section Antialiasing
 * @param $state Define se haverá antialising (true or false)
 * @example
 *   @include font-smoothing(true);
 */

 @mixin antialiased($state: true) {
	@if $state == true {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	} @else {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
	}
}
